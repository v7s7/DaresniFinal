rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is tutor
    function isTutor() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'tutor';
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection
    match /users/{uid} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == uid;
      // Admins can read/write all user profiles
      allow read, write: if isAdmin();
    }

    // Subjects collection
    match /subjects/{subjectId} {
      // Anyone authenticated can read subjects
      allow read: if isAuthenticated();
      // Only admins can write subjects
      allow write: if isAdmin();
    }

    // Sessions collection
    match /sessions/{sessionId} {
      // Users can read sessions they're part of (student or tutor)
      allow read: if isAuthenticated() && 
                  (resource.data.studentId == request.auth.uid || 
                   resource.data.tutorId == request.auth.uid);
      // Users can create sessions if they're the student
      allow create: if isAuthenticated() && 
                    request.resource.data.studentId == request.auth.uid;
      // Users can update sessions they're part of
      allow update: if isAuthenticated() && 
                    (resource.data.studentId == request.auth.uid || 
                     resource.data.tutorId == request.auth.uid);
      // Admins can read/write all sessions
      allow read, write: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      // Anyone authenticated can read reviews
      allow read: if isAuthenticated();
      // Only the student who booked the session can create a review
      allow create: if isAuthenticated() && 
                    request.resource.data.studentId == request.auth.uid;
      // Users can update their own reviews
      allow update: if isAuthenticated() && 
                    resource.data.studentId == request.auth.uid;
      // Admins can read/write all reviews
      allow read, write: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      // Users can read messages in sessions they're part of
      allow read: if isAuthenticated() && 
                  (resource.data.senderId == request.auth.uid ||
                   resource.data.receiverId == request.auth.uid);
      // Users can send messages if they're the sender
      allow create: if isAuthenticated() && 
                    request.resource.data.senderId == request.auth.uid;
      // Admins can read/write all messages
      allow read, write: if isAdmin();
    }

    // Files collection (for file uploads)
    match /files/{fileId} {
      // Users can read files they uploaded or files in their sessions
      allow read: if isAuthenticated() && 
                  (resource.data.uploadedBy == request.auth.uid ||
                   resource.data.sessionId in getUserSessionIds());
      // Users can upload files
      allow create: if isAuthenticated() && 
                    request.resource.data.uploadedBy == request.auth.uid;
      // Admins can read/write all files
      allow read, write: if isAdmin();
    }

    // Helper function to get user's session IDs
    function getUserSessionIds() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.sessionIds;
    }

    // everything else denied by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}