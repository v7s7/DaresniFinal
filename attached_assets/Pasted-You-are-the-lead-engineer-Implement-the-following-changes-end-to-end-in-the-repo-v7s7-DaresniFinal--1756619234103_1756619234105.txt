You are the lead engineer. Implement the following changes end-to-end in the repo v7s7/DaresniFinal. No stubs, no mocks. Wire everything to Postgres (Drizzle + Neon) and Firebase Auth (client). Keep styling as-is (Radix/shadcn/Tailwind). Deliver production-ready code and update docs.

GOALS
1) Real DB-backed API (replace all mocked routes).
2) Clean Tutor onboarding: Sign in → choose role=tutor → redirect to Profile with prefilled data; only missing fields required; remove redundant “add more data” step.
3) Admin notifications when a tutor registers: DB record + in-app notification in Admin dashboard + email to all admins.
4) Keep current routes/UX where possible; add only what’s necessary.
5) Strong validation, proper errors, and security.

DATA MODEL (Drizzle in shared/schema.ts)
- Ensure/extend tables (create if missing):
  users(id PK text [Firebase UID], email unique, first_name, last_name, role enum['student','tutor','admin'] default 'student', created_at, updated_at)
  subjects(id text PK, name unique not null, description, created_at)
  tutor_profiles(id text PK, user_id FK->users.id unique not null, bio, phone, hourly_rate int, is_verified bool default false, is_active bool default true, total_rating numeric default 0, created_at, updated_at)
  tutor_subjects(tutor_id FK->tutor_profiles.id, subject_id FK->subjects.id, PK(tutor_id, subject_id))
  notifications(id text PK, type enum['TUTOR_REGISTERED','MISC'], title text, body text, data json, is_read bool default false, audience enum['admin','user'] default 'admin', created_at)
- Add drizzle-kit migration and run db push.
- Seed subjects once if empty (Math, English, Science, History, Computer Science).

SERVER (Express, server/*.ts)
- Add Firebase Admin SDK initialization (read credentials from env) and middleware requireUser:
  * Verify Authorization: Bearer <Firebase ID token>.
  * Upsert users row (id=email UID, email, first/last names). Attach req.user={id,email,role}.
- Replace mocks in routes.ts with DB logic:

  Auth/User
  - POST /api/auth/choose-role {role:'tutor'|'student'} → update users.role. If role='tutor' and no tutor_profile, create minimal profile {user_id}. Return {ok:true, role}.
  - GET /api/me → return { user, hasTutorProfile }.

  Tutor Profile (self)
  - GET /api/tutors/profile → return full profile + subjects (join).
  - PUT /api/tutors/profile {bio?, phone?, hourlyRate?, subjects?: string[]}:
      * Upsert profile; replace tutor_subjects set.
      * If this is the first creation (no previous row), create notifications row:
        {type:'TUTOR_REGISTERED', title:'New tutor registered', body:'<name> (<email>)', data:{userId}, audience:'admin'}.
      * After DB write, send admin emails (see Email below). Return updated profile.

  Tutor Admin
  - PUT /api/tutors/:tutorId/verify → set is_verified=true.
  - GET /api/admin/notifications (admin-only) → latest notifications with pagination.
  - POST /api/admin/notifications/:id/read → mark as read.

  Subjects
  - GET /api/subjects → from DB (no mocks).

- Validation: use zod for all request bodies. Return JSON errors {message, fieldErrors?} with correct HTTP status.

EMAIL (server/email.ts)
- Implement sendEmail via either Resend or SMTP (via Nodemailer). Choose by env. Function: sendToAdmins(subject, html/text).
- Admin list = all users where role='admin'.
- Trigger on first successful tutor profile creation.

ADMIN NOTIFICATIONS STREAM
- Simple polling is acceptable: no websockets required. Add optional SSE endpoint /api/admin/notifications/stream if quick to implement.

CLIENT
- AuthProvider: on Firebase auth state change, get ID token and attach as Authorization header for all API calls (React Query fetcher). After sign-in, call GET /api/me to bootstrap.
- “Become a Tutor” button flow:
  * If not signed in, sign in first (Firebase).
  * POST /api/auth/choose-role {role:'tutor'} then redirect to /profile.
- Profile page:
  * On mount: GET /api/tutors/profile and GET /api/me.
  * Prefill fields with known user/profile values.
  * Visually mark only missing fields (phone, bio, hourlyRate, subjects) as required.
  * On save: PUT /api/tutors/profile. Show success toast.
  * Remove any separate page that redundantly asks for data just provided (delete that route and any dead code).
- AdminDashboard:
  * Add Notifications panel using React Query polling /api/admin/notifications every 15s (badge for unread).
  * On new TUTOR_REGISTERED, show toast and link to the tutor profile review.
  * Add Verify action calling PUT /api/tutors/:tutorId/verify and update UI state.

ENV & CONFIG
- Add .env.example and README sections. Required:
  DATABASE_URL=postgres://...
  SESSION_SECRET=change-me
  FIREBASE_PROJECT_ID=...
  FIREBASE_CLIENT_EMAIL=...
  FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
  # choose one email method:
  RESEND_API_KEY=... ; RESEND_FROM="Daresni <noreply@domain>"
  # or SMTP:
  SMTP_HOST=... ; SMTP_PORT=587 ; SMTP_USER=... ; SMTP_PASS=... ; SMTP_FROM="Daresni <noreply@domain>"
- Ensure server starts without Replit OIDC dependency; keep it optional/disabled unless configured.

SECURITY & QUALITY
- Protect admin routes with server-side role check (users.role==='admin').
- Sanitize inputs, validate IDs, and avoid N+1 queries; use Drizzle joins where possible.
- Handle empty states gracefully on client.

ACCEPTANCE TESTS
- New user signs in → clicks “Become a Tutor” → role becomes tutor → redirected to /profile with prefilled fields → completes missing fields → Save succeeds → notifications row created → admin receives email → AdminDashboard shows new notification within 15s → admin clicks Verify → tutor sees verified status.
- /api/subjects, /api/tutors/profile, /api/admin/notifications return DB data (no mocks).
- All endpoints return correct errors on bad input or missing auth.

DELIVERABLES
- Updated server code (routes, middleware, email helper), shared schema + migrations, client pages/components, and README with run instructions.
- Remove obsolete “add more data” page and any leftover mocked endpoints.
