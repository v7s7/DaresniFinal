You are an expert full-stack web developer. I want you to build a complete tutoring system website that runs inside Replit using React.js and Firebase (Firestore + Auth + Storage).  

Details:  
- Purpose: An online tutoring system where students can register, book sessions with tutors, attend live online classes, make payments, and track progress. Tutors can manage schedules and resources, while admins oversee everything.  
- Tech stack:  
   - React.js (frontend)  
   - Firebase Firestore (database)  
   - Firebase Authentication (email/password, Google login, password recovery)  
   - Firebase Storage (file uploads, certificates, notes, session resources)  
   - Tailwind CSS for responsive UI  

Functional Requirements:  

**Student (Learner):**  
- Register, login, logout with Firebase Authentication.  
- Login with Google (Firebase Google Auth provider).  
- Reset password via Firebase Auth.  
- Browse tutors with details (name, subject, rating, hourly rate, availability, profile pic).  
- Book tutoring sessions (store in Firestore).  
- Get booking confirmation (Firebase email or notification).  
- Receive reminders before sessions.  
- Attend live sessions (integration with WebRTC / Zoom SDK optional).  
- Upload assignments/notes/questions (Firebase Storage).  
- Edit profile (name, email, phone, goals, picture).  
- View past/upcoming sessions.  
- Rate/review tutors.  
- Search tutors by subject, rating, or price.  
- Save tutors as favorites.  
- Chat with tutors (Firestore real-time messaging).  
- Make secure online payments (Stripe integration or mock payments).  
- Download shared session files or recordings.  

**Tutor (Instructor):**  
- Register/login with Firebase Auth.  
- Update profile (bio, subjects, rate, availability).  
- Upload documents for admin verification (Firebase Storage).  
- View and respond to booking requests.  
- Manage calendar availability.  
- Conduct live sessions (basic video chat via WebRTC or integrate Zoom/Google Meet links).  
- Share files/resources during sessions (Firebase Storage links).  
- View student profiles.  
- Upload assignments/resources.  
- View session history.  
- See reviews/ratings.  
- Chat with students in real time.  
- Track payments.  
-  A tutor must be verified first before offering thier services
**Admin:**  
- Login with admin role (Firebase custom claims).  
- Approve/remove tutors after verifying documents.  
- Manage all students/tutors.  
- Monitor sessions and reports.  
- Edit tutor/student profiles.  
- Suspend/delete accounts violating rules.  
- Manage payments and refunds.  
- Send notifications/announcements (Firestore collections).  
- Manage FAQs/help pages.  
- Filter reports by date, tutor, student, subject.  
- Configure settings (fees, commission, limits).  

Requirements:  
1. Project folder structure optimized for React + Firebase.  
2. Implement role-based access (student/tutor/admin) using Firebase Auth custom claims or Firestore rules.  
3. Firestore schema for: Users, Bookings, Messages, Payments, Reviews.  
4. React pages:  
   - Homepage  
   - Login/Register (with Google)  
   - Student Dashboard (book tutors, view sessions, payments, chat)  
   - Tutor Dashboard (manage profile, availability, bookings, resources, payments)  
   - Admin Dashboard (manage users, sessions, reports, payments, content)  
   - About Us / Contact page  
5. Sample seed data in Firestore for testing.  
6. Responsive design with Tailwind CSS.  
7. Step-by-step instructions for running in Replit.  
8. Suggested improvements (push notifications via Firebase Cloud Messaging, real-time whiteboard, integrated payments).  

Deliverables:  
- Full project code (React + Firebase).  
- Firestore schema & example collections.  
- Example code snippets (Firebase Auth, booking flow, chat).  
- Instructions to test and run in Replit.  
- Suggested next steps.  

Output must be structured into:  
1. Project Overview  
2. Folder Structure  
3. Firestore Schema  
4. React Components & Routing  
5. Firebase Authentication setup  
6. Example Code Snippets  
7. Replit Run Instructions  
8. Suggested Improvements  
